{"ast":null,"code":"import { toBytes, ensureBytes } from './utils.js';\nimport assert from './_assert.js';\n// Poly1305 is a fast and parallel secret-key message-authentication code.\n// https://cr.yp.to/mac.html, https://cr.yp.to/mac/poly1305-20050329.pdf\n// https://datatracker.ietf.org/doc/html/rfc8439\n// Based on Public Domain poly1305-donna https://github.com/floodyberry/poly1305-donna\nconst u8to16 = (a, i) => a[i++] & 0xff | (a[i++] & 0xff) << 8;\nclass Poly1305 {\n  constructor(key) {\n    this.blockLen = 16;\n    this.outputLen = 16;\n    this.buffer = new Uint8Array(16);\n    this.r = new Uint16Array(10);\n    this.h = new Uint16Array(10);\n    this.pad = new Uint16Array(8);\n    this.pos = 0;\n    this.finished = false;\n    key = toBytes(key);\n    ensureBytes(key, 32);\n    const t0 = u8to16(key, 0);\n    const t1 = u8to16(key, 2);\n    const t2 = u8to16(key, 4);\n    const t3 = u8to16(key, 6);\n    const t4 = u8to16(key, 8);\n    const t5 = u8to16(key, 10);\n    const t6 = u8to16(key, 12);\n    const t7 = u8to16(key, 14);\n    // https://github.com/floodyberry/poly1305-donna/blob/e6ad6e091d30d7f4ec2d4f978be1fcfcbce72781/poly1305-donna-16.h#L47\n    this.r[0] = t0 & 0x1fff;\n    this.r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;\n    this.r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;\n    this.r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;\n    this.r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;\n    this.r[5] = t4 >>> 1 & 0x1ffe;\n    this.r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;\n    this.r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;\n    this.r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;\n    this.r[9] = t7 >>> 5 & 0x007f;\n    for (let i = 0; i < 8; i++) this.pad[i] = u8to16(key, 16 + 2 * i);\n  }\n  process(data, offset) {\n    let isLast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const hibit = isLast ? 0 : 1 << 11;\n    const {\n      h,\n      r\n    } = this;\n    const r0 = r[0];\n    const r1 = r[1];\n    const r2 = r[2];\n    const r3 = r[3];\n    const r4 = r[4];\n    const r5 = r[5];\n    const r6 = r[6];\n    const r7 = r[7];\n    const r8 = r[8];\n    const r9 = r[9];\n    const t0 = u8to16(data, offset + 0);\n    const t1 = u8to16(data, offset + 2);\n    const t2 = u8to16(data, offset + 4);\n    const t3 = u8to16(data, offset + 6);\n    const t4 = u8to16(data, offset + 8);\n    const t5 = u8to16(data, offset + 10);\n    const t6 = u8to16(data, offset + 12);\n    const t7 = u8to16(data, offset + 14);\n    let h0 = h[0] + (t0 & 0x1fff);\n    let h1 = h[1] + ((t0 >>> 13 | t1 << 3) & 0x1fff);\n    let h2 = h[2] + ((t1 >>> 10 | t2 << 6) & 0x1fff);\n    let h3 = h[3] + ((t2 >>> 7 | t3 << 9) & 0x1fff);\n    let h4 = h[4] + ((t3 >>> 4 | t4 << 12) & 0x1fff);\n    let h5 = h[5] + (t4 >>> 1 & 0x1fff);\n    let h6 = h[6] + ((t4 >>> 14 | t5 << 2) & 0x1fff);\n    let h7 = h[7] + ((t5 >>> 11 | t6 << 5) & 0x1fff);\n    let h8 = h[8] + ((t6 >>> 8 | t7 << 8) & 0x1fff);\n    let h9 = h[9] + (t7 >>> 5 | hibit);\n    let c = 0;\n    let d0 = c + h0 * r0 + h1 * (5 * r9) + h2 * (5 * r8) + h3 * (5 * r7) + h4 * (5 * r6);\n    c = d0 >>> 13;\n    d0 &= 0x1fff;\n    d0 += h5 * (5 * r5) + h6 * (5 * r4) + h7 * (5 * r3) + h8 * (5 * r2) + h9 * (5 * r1);\n    c += d0 >>> 13;\n    d0 &= 0x1fff;\n    let d1 = c + h0 * r1 + h1 * r0 + h2 * (5 * r9) + h3 * (5 * r8) + h4 * (5 * r7);\n    c = d1 >>> 13;\n    d1 &= 0x1fff;\n    d1 += h5 * (5 * r6) + h6 * (5 * r5) + h7 * (5 * r4) + h8 * (5 * r3) + h9 * (5 * r2);\n    c += d1 >>> 13;\n    d1 &= 0x1fff;\n    let d2 = c + h0 * r2 + h1 * r1 + h2 * r0 + h3 * (5 * r9) + h4 * (5 * r8);\n    c = d2 >>> 13;\n    d2 &= 0x1fff;\n    d2 += h5 * (5 * r7) + h6 * (5 * r6) + h7 * (5 * r5) + h8 * (5 * r4) + h9 * (5 * r3);\n    c += d2 >>> 13;\n    d2 &= 0x1fff;\n    let d3 = c + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * (5 * r9);\n    c = d3 >>> 13;\n    d3 &= 0x1fff;\n    d3 += h5 * (5 * r8) + h6 * (5 * r7) + h7 * (5 * r6) + h8 * (5 * r5) + h9 * (5 * r4);\n    c += d3 >>> 13;\n    d3 &= 0x1fff;\n    let d4 = c + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;\n    c = d4 >>> 13;\n    d4 &= 0x1fff;\n    d4 += h5 * (5 * r9) + h6 * (5 * r8) + h7 * (5 * r7) + h8 * (5 * r6) + h9 * (5 * r5);\n    c += d4 >>> 13;\n    d4 &= 0x1fff;\n    let d5 = c + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;\n    c = d5 >>> 13;\n    d5 &= 0x1fff;\n    d5 += h5 * r0 + h6 * (5 * r9) + h7 * (5 * r8) + h8 * (5 * r7) + h9 * (5 * r6);\n    c += d5 >>> 13;\n    d5 &= 0x1fff;\n    let d6 = c + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;\n    c = d6 >>> 13;\n    d6 &= 0x1fff;\n    d6 += h5 * r1 + h6 * r0 + h7 * (5 * r9) + h8 * (5 * r8) + h9 * (5 * r7);\n    c += d6 >>> 13;\n    d6 &= 0x1fff;\n    let d7 = c + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;\n    c = d7 >>> 13;\n    d7 &= 0x1fff;\n    d7 += h5 * r2 + h6 * r1 + h7 * r0 + h8 * (5 * r9) + h9 * (5 * r8);\n    c += d7 >>> 13;\n    d7 &= 0x1fff;\n    let d8 = c + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;\n    c = d8 >>> 13;\n    d8 &= 0x1fff;\n    d8 += h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * (5 * r9);\n    c += d8 >>> 13;\n    d8 &= 0x1fff;\n    let d9 = c + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;\n    c = d9 >>> 13;\n    d9 &= 0x1fff;\n    d9 += h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;\n    c += d9 >>> 13;\n    d9 &= 0x1fff;\n    c = (c << 2) + c | 0;\n    c = c + d0 | 0;\n    d0 = c & 0x1fff;\n    c = c >>> 13;\n    d1 += c;\n    h[0] = d0;\n    h[1] = d1;\n    h[2] = d2;\n    h[3] = d3;\n    h[4] = d4;\n    h[5] = d5;\n    h[6] = d6;\n    h[7] = d7;\n    h[8] = d8;\n    h[9] = d9;\n  }\n  finalize() {\n    const {\n      h,\n      pad\n    } = this;\n    const g = new Uint16Array(10);\n    let c = h[1] >>> 13;\n    h[1] &= 0x1fff;\n    for (let i = 2; i < 10; i++) {\n      h[i] += c;\n      c = h[i] >>> 13;\n      h[i] &= 0x1fff;\n    }\n    h[0] += c * 5;\n    c = h[0] >>> 13;\n    h[0] &= 0x1fff;\n    h[1] += c;\n    c = h[1] >>> 13;\n    h[1] &= 0x1fff;\n    h[2] += c;\n    g[0] = h[0] + 5;\n    c = g[0] >>> 13;\n    g[0] &= 0x1fff;\n    for (let i = 1; i < 10; i++) {\n      g[i] = h[i] + c;\n      c = g[i] >>> 13;\n      g[i] &= 0x1fff;\n    }\n    g[9] -= 1 << 13;\n    let mask = (c ^ 1) - 1;\n    for (let i = 0; i < 10; i++) g[i] &= mask;\n    mask = ~mask;\n    for (let i = 0; i < 10; i++) h[i] = h[i] & mask | g[i];\n    h[0] = (h[0] | h[1] << 13) & 0xffff;\n    h[1] = (h[1] >>> 3 | h[2] << 10) & 0xffff;\n    h[2] = (h[2] >>> 6 | h[3] << 7) & 0xffff;\n    h[3] = (h[3] >>> 9 | h[4] << 4) & 0xffff;\n    h[4] = (h[4] >>> 12 | h[5] << 1 | h[6] << 14) & 0xffff;\n    h[5] = (h[6] >>> 2 | h[7] << 11) & 0xffff;\n    h[6] = (h[7] >>> 5 | h[8] << 8) & 0xffff;\n    h[7] = (h[8] >>> 8 | h[9] << 5) & 0xffff;\n    let f = h[0] + pad[0];\n    h[0] = f & 0xffff;\n    for (let i = 1; i < 8; i++) {\n      f = (h[i] + pad[i] | 0) + (f >>> 16) | 0;\n      h[i] = f & 0xffff;\n    }\n  }\n  update(data) {\n    assert.exists(this);\n    const {\n      buffer,\n      blockLen\n    } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input\n      if (take === blockLen) {\n        for (; blockLen <= len - pos; pos += blockLen) this.process(data, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(buffer, 0, false);\n        this.pos = 0;\n      }\n    }\n    return this;\n  }\n  destroy() {\n    this.h.fill(0);\n    this.r.fill(0);\n    this.buffer.fill(0);\n    this.pad.fill(0);\n  }\n  digestInto(out) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    const {\n      buffer,\n      h\n    } = this;\n    let {\n      pos\n    } = this;\n    if (pos) {\n      buffer[pos++] = 1;\n      // buffer.subarray(pos).fill(0);\n      for (; pos < 16; pos++) buffer[pos] = 0;\n      this.process(buffer, 0, true);\n    }\n    this.finalize();\n    let opos = 0;\n    for (let i = 0; i < 8; i++) {\n      out[opos++] = h[i] >>> 0;\n      out[opos++] = h[i] >>> 8;\n    }\n    return out;\n  }\n  digest() {\n    const {\n      buffer,\n      outputLen\n    } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n}\nexport function wrapConstructorWithKey(hashCons) {\n  const hashC = (msg, key) => hashCons(key).update(toBytes(msg)).digest();\n  const tmp = hashCons(new Uint8Array(32));\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = key => hashCons(key);\n  return hashC;\n}\nexport const poly1305 = wrapConstructorWithKey(key => new Poly1305(key));","map":{"version":3,"names":["toBytes","ensureBytes","assert","u8to16","a","i","Poly1305","constructor","key","blockLen","outputLen","buffer","Uint8Array","r","Uint16Array","h","pad","pos","finished","t0","t1","t2","t3","t4","t5","t6","t7","process","data","offset","isLast","arguments","length","undefined","hibit","r0","r1","r2","r3","r4","r5","r6","r7","r8","r9","h0","h1","h2","h3","h4","h5","h6","h7","h8","h9","c","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","finalize","g","mask","f","update","exists","len","take","Math","min","set","subarray","destroy","fill","digestInto","out","output","opos","digest","res","slice","wrapConstructorWithKey","hashCons","hashC","msg","tmp","create","poly1305"],"sources":["/Users/lance/myProject/nostr-client-web/node_modules/@noble/ciphers/src/_poly1305.ts"],"sourcesContent":["import { toBytes, Input, ensureBytes, Hash } from './utils.js';\nimport assert from './_assert.js';\n\n// Poly1305 is a fast and parallel secret-key message-authentication code.\n// https://cr.yp.to/mac.html, https://cr.yp.to/mac/poly1305-20050329.pdf\n// https://datatracker.ietf.org/doc/html/rfc8439\n\n// Based on Public Domain poly1305-donna https://github.com/floodyberry/poly1305-donna\nconst u8to16 = (a: Uint8Array, i: number) => (a[i++] & 0xff) | ((a[i++] & 0xff) << 8);\nclass Poly1305 implements Hash<Poly1305> {\n  readonly blockLen = 16;\n  readonly outputLen = 16;\n  private buffer = new Uint8Array(16);\n  private r = new Uint16Array(10);\n  private h = new Uint16Array(10);\n  private pad = new Uint16Array(8);\n  private pos = 0;\n  protected finished = false;\n\n  constructor(key: Input) {\n    key = toBytes(key);\n    ensureBytes(key, 32);\n    const t0 = u8to16(key, 0);\n    const t1 = u8to16(key, 2);\n    const t2 = u8to16(key, 4);\n    const t3 = u8to16(key, 6);\n    const t4 = u8to16(key, 8);\n    const t5 = u8to16(key, 10);\n    const t6 = u8to16(key, 12);\n    const t7 = u8to16(key, 14);\n\n    // https://github.com/floodyberry/poly1305-donna/blob/e6ad6e091d30d7f4ec2d4f978be1fcfcbce72781/poly1305-donna-16.h#L47\n    this.r[0] = t0 & 0x1fff;\n    this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\n    this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;\n    this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\n    this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;\n    this.r[5] = (t4 >>> 1) & 0x1ffe;\n    this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\n    this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;\n    this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\n    this.r[9] = (t7 >>> 5) & 0x007f;\n    for (let i = 0; i < 8; i++) this.pad[i] = u8to16(key, 16 + 2 * i);\n  }\n\n  private process(data: Uint8Array, offset: number, isLast = false) {\n    const hibit = isLast ? 0 : 1 << 11;\n    const { h, r } = this;\n    const r0 = r[0];\n    const r1 = r[1];\n    const r2 = r[2];\n    const r3 = r[3];\n    const r4 = r[4];\n    const r5 = r[5];\n    const r6 = r[6];\n    const r7 = r[7];\n    const r8 = r[8];\n    const r9 = r[9];\n\n    const t0 = u8to16(data, offset + 0);\n    const t1 = u8to16(data, offset + 2);\n    const t2 = u8to16(data, offset + 4);\n    const t3 = u8to16(data, offset + 6);\n    const t4 = u8to16(data, offset + 8);\n    const t5 = u8to16(data, offset + 10);\n    const t6 = u8to16(data, offset + 12);\n    const t7 = u8to16(data, offset + 14);\n\n    let h0 = h[0] + (t0 & 0x1fff);\n    let h1 = h[1] + (((t0 >>> 13) | (t1 << 3)) & 0x1fff);\n    let h2 = h[2] + (((t1 >>> 10) | (t2 << 6)) & 0x1fff);\n    let h3 = h[3] + (((t2 >>> 7) | (t3 << 9)) & 0x1fff);\n    let h4 = h[4] + (((t3 >>> 4) | (t4 << 12)) & 0x1fff);\n    let h5 = h[5] + ((t4 >>> 1) & 0x1fff);\n    let h6 = h[6] + (((t4 >>> 14) | (t5 << 2)) & 0x1fff);\n    let h7 = h[7] + (((t5 >>> 11) | (t6 << 5)) & 0x1fff);\n    let h8 = h[8] + (((t6 >>> 8) | (t7 << 8)) & 0x1fff);\n    let h9 = h[9] + ((t7 >>> 5) | hibit);\n\n    let c = 0;\n\n    let d0 = c + h0 * r0 + h1 * (5 * r9) + h2 * (5 * r8) + h3 * (5 * r7) + h4 * (5 * r6);\n    c = d0 >>> 13;\n    d0 &= 0x1fff;\n    d0 += h5 * (5 * r5) + h6 * (5 * r4) + h7 * (5 * r3) + h8 * (5 * r2) + h9 * (5 * r1);\n    c += d0 >>> 13;\n    d0 &= 0x1fff;\n\n    let d1 = c + h0 * r1 + h1 * r0 + h2 * (5 * r9) + h3 * (5 * r8) + h4 * (5 * r7);\n    c = d1 >>> 13;\n    d1 &= 0x1fff;\n    d1 += h5 * (5 * r6) + h6 * (5 * r5) + h7 * (5 * r4) + h8 * (5 * r3) + h9 * (5 * r2);\n    c += d1 >>> 13;\n    d1 &= 0x1fff;\n\n    let d2 = c + h0 * r2 + h1 * r1 + h2 * r0 + h3 * (5 * r9) + h4 * (5 * r8);\n    c = d2 >>> 13;\n    d2 &= 0x1fff;\n    d2 += h5 * (5 * r7) + h6 * (5 * r6) + h7 * (5 * r5) + h8 * (5 * r4) + h9 * (5 * r3);\n    c += d2 >>> 13;\n    d2 &= 0x1fff;\n\n    let d3 = c + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * (5 * r9);\n    c = d3 >>> 13;\n    d3 &= 0x1fff;\n    d3 += h5 * (5 * r8) + h6 * (5 * r7) + h7 * (5 * r6) + h8 * (5 * r5) + h9 * (5 * r4);\n    c += d3 >>> 13;\n    d3 &= 0x1fff;\n\n    let d4 = c + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;\n    c = d4 >>> 13;\n    d4 &= 0x1fff;\n    d4 += h5 * (5 * r9) + h6 * (5 * r8) + h7 * (5 * r7) + h8 * (5 * r6) + h9 * (5 * r5);\n    c += d4 >>> 13;\n    d4 &= 0x1fff;\n\n    let d5 = c + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;\n    c = d5 >>> 13;\n    d5 &= 0x1fff;\n    d5 += h5 * r0 + h6 * (5 * r9) + h7 * (5 * r8) + h8 * (5 * r7) + h9 * (5 * r6);\n    c += d5 >>> 13;\n    d5 &= 0x1fff;\n\n    let d6 = c + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;\n    c = d6 >>> 13;\n    d6 &= 0x1fff;\n    d6 += h5 * r1 + h6 * r0 + h7 * (5 * r9) + h8 * (5 * r8) + h9 * (5 * r7);\n    c += d6 >>> 13;\n    d6 &= 0x1fff;\n\n    let d7 = c + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;\n    c = d7 >>> 13;\n    d7 &= 0x1fff;\n    d7 += h5 * r2 + h6 * r1 + h7 * r0 + h8 * (5 * r9) + h9 * (5 * r8);\n    c += d7 >>> 13;\n    d7 &= 0x1fff;\n\n    let d8 = c + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;\n    c = d8 >>> 13;\n    d8 &= 0x1fff;\n    d8 += h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * (5 * r9);\n    c += d8 >>> 13;\n    d8 &= 0x1fff;\n\n    let d9 = c + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;\n    c = d9 >>> 13;\n    d9 &= 0x1fff;\n    d9 += h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;\n    c += d9 >>> 13;\n    d9 &= 0x1fff;\n\n    c = ((c << 2) + c) | 0;\n    c = (c + d0) | 0;\n    d0 = c & 0x1fff;\n    c = c >>> 13;\n    d1 += c;\n\n    h[0] = d0;\n    h[1] = d1;\n    h[2] = d2;\n    h[3] = d3;\n    h[4] = d4;\n    h[5] = d5;\n    h[6] = d6;\n    h[7] = d7;\n    h[8] = d8;\n    h[9] = d9;\n  }\n\n  private finalize() {\n    const { h, pad } = this;\n    const g = new Uint16Array(10);\n    let c = h[1] >>> 13;\n    h[1] &= 0x1fff;\n    for (let i = 2; i < 10; i++) {\n      h[i] += c;\n      c = h[i] >>> 13;\n      h[i] &= 0x1fff;\n    }\n    h[0] += c * 5;\n    c = h[0] >>> 13;\n    h[0] &= 0x1fff;\n    h[1] += c;\n    c = h[1] >>> 13;\n    h[1] &= 0x1fff;\n    h[2] += c;\n\n    g[0] = h[0] + 5;\n    c = g[0] >>> 13;\n    g[0] &= 0x1fff;\n    for (let i = 1; i < 10; i++) {\n      g[i] = h[i] + c;\n      c = g[i] >>> 13;\n      g[i] &= 0x1fff;\n    }\n    g[9] -= 1 << 13;\n\n    let mask = (c ^ 1) - 1;\n    for (let i = 0; i < 10; i++) g[i] &= mask;\n    mask = ~mask;\n    for (let i = 0; i < 10; i++) h[i] = (h[i] & mask) | g[i];\n    h[0] = (h[0] | (h[1] << 13)) & 0xffff;\n    h[1] = ((h[1] >>> 3) | (h[2] << 10)) & 0xffff;\n    h[2] = ((h[2] >>> 6) | (h[3] << 7)) & 0xffff;\n    h[3] = ((h[3] >>> 9) | (h[4] << 4)) & 0xffff;\n    h[4] = ((h[4] >>> 12) | (h[5] << 1) | (h[6] << 14)) & 0xffff;\n    h[5] = ((h[6] >>> 2) | (h[7] << 11)) & 0xffff;\n    h[6] = ((h[7] >>> 5) | (h[8] << 8)) & 0xffff;\n    h[7] = ((h[8] >>> 8) | (h[9] << 5)) & 0xffff;\n\n    let f = h[0] + pad[0];\n    h[0] = f & 0xffff;\n    for (let i = 1; i < 8; i++) {\n      f = (((h[i] + pad[i]) | 0) + (f >>> 16)) | 0;\n      h[i] = f & 0xffff;\n    }\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input\n      if (take === blockLen) {\n        for (; blockLen <= len - pos; pos += blockLen) this.process(data, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(buffer, 0, false);\n        this.pos = 0;\n      }\n    }\n    return this;\n  }\n  destroy() {\n    this.h.fill(0);\n    this.r.fill(0);\n    this.buffer.fill(0);\n    this.pad.fill(0);\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    const { buffer, h } = this;\n    let { pos } = this;\n    if (pos) {\n      buffer[pos++] = 1;\n      // buffer.subarray(pos).fill(0);\n      for (; pos < 16; pos++) buffer[pos] = 0;\n      this.process(buffer, 0, true);\n    }\n    this.finalize();\n    let opos = 0;\n    for (let i = 0; i < 8; i++) {\n      out[opos++] = h[i] >>> 0;\n      out[opos++] = h[i] >>> 8;\n    }\n    return out;\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n}\n\nexport type CHash = ReturnType<typeof wrapConstructorWithKey>;\nexport function wrapConstructorWithKey<H extends Hash<H>>(hashCons: (key: Input) => Hash<H>) {\n  const hashC = (msg: Input, key: Input): Uint8Array => hashCons(key).update(toBytes(msg)).digest();\n  const tmp = hashCons(new Uint8Array(32));\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (key: Input) => hashCons(key);\n  return hashC;\n}\n\nexport const poly1305 = wrapConstructorWithKey((key) => new Poly1305(key));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}