{"ast":null,"code":"import { createView, ensureBytes, equalBytes, setBigUint64, u32 } from './utils.js';\nimport { poly1305 } from './_poly1305.js';\nimport { salsaBasic } from './_salsa.js';\n// ChaCha20 stream cipher was released in 2008. ChaCha aims to increase\n// the diffusion per round, but had slightly less cryptanalysis.\n// https://cr.yp.to/chacha.html, http://cr.yp.to/chacha/chacha-20080128.pdf\n// Left rotate for uint32\nconst rotl = (a, b) => a << b | a >>> 32 - b;\n/**\n * ChaCha core function.\n */\n// prettier-ignore\nfunction chachaCore(c, k, n, out, cnt, rounds = 20) {\n  let y00 = c[0],\n    y01 = c[1],\n    y02 = c[2],\n    y03 = c[3]; // \"expa\"   \"nd 3\"  \"2-by\"  \"te k\"\n  let y04 = k[0],\n    y05 = k[1],\n    y06 = k[2],\n    y07 = k[3]; // Key      Key     Key     Key\n  let y08 = k[4],\n    y09 = k[5],\n    y10 = k[6],\n    y11 = k[7]; // Key      Key     Key     Key\n  let y12 = cnt,\n    y13 = n[0],\n    y14 = n[1],\n    y15 = n[2]; // Counter  Counter\tNonce   Nonce\n  // Save state to temporary variables\n  let x00 = y00,\n    x01 = y01,\n    x02 = y02,\n    x03 = y03,\n    x04 = y04,\n    x05 = y05,\n    x06 = y06,\n    x07 = y07,\n    x08 = y08,\n    x09 = y09,\n    x10 = y10,\n    x11 = y11,\n    x12 = y12,\n    x13 = y13,\n    x14 = y14,\n    x15 = y15;\n  // Main loop\n  for (let i = 0; i < rounds; i += 2) {\n    x00 = x00 + x04 | 0;\n    x12 = rotl(x12 ^ x00, 16);\n    x08 = x08 + x12 | 0;\n    x04 = rotl(x04 ^ x08, 12);\n    x00 = x00 + x04 | 0;\n    x12 = rotl(x12 ^ x00, 8);\n    x08 = x08 + x12 | 0;\n    x04 = rotl(x04 ^ x08, 7);\n    x01 = x01 + x05 | 0;\n    x13 = rotl(x13 ^ x01, 16);\n    x09 = x09 + x13 | 0;\n    x05 = rotl(x05 ^ x09, 12);\n    x01 = x01 + x05 | 0;\n    x13 = rotl(x13 ^ x01, 8);\n    x09 = x09 + x13 | 0;\n    x05 = rotl(x05 ^ x09, 7);\n    x02 = x02 + x06 | 0;\n    x14 = rotl(x14 ^ x02, 16);\n    x10 = x10 + x14 | 0;\n    x06 = rotl(x06 ^ x10, 12);\n    x02 = x02 + x06 | 0;\n    x14 = rotl(x14 ^ x02, 8);\n    x10 = x10 + x14 | 0;\n    x06 = rotl(x06 ^ x10, 7);\n    x03 = x03 + x07 | 0;\n    x15 = rotl(x15 ^ x03, 16);\n    x11 = x11 + x15 | 0;\n    x07 = rotl(x07 ^ x11, 12);\n    x03 = x03 + x07 | 0;\n    x15 = rotl(x15 ^ x03, 8);\n    x11 = x11 + x15 | 0;\n    x07 = rotl(x07 ^ x11, 7);\n    x00 = x00 + x05 | 0;\n    x15 = rotl(x15 ^ x00, 16);\n    x10 = x10 + x15 | 0;\n    x05 = rotl(x05 ^ x10, 12);\n    x00 = x00 + x05 | 0;\n    x15 = rotl(x15 ^ x00, 8);\n    x10 = x10 + x15 | 0;\n    x05 = rotl(x05 ^ x10, 7);\n    x01 = x01 + x06 | 0;\n    x12 = rotl(x12 ^ x01, 16);\n    x11 = x11 + x12 | 0;\n    x06 = rotl(x06 ^ x11, 12);\n    x01 = x01 + x06 | 0;\n    x12 = rotl(x12 ^ x01, 8);\n    x11 = x11 + x12 | 0;\n    x06 = rotl(x06 ^ x11, 7);\n    x02 = x02 + x07 | 0;\n    x13 = rotl(x13 ^ x02, 16);\n    x08 = x08 + x13 | 0;\n    x07 = rotl(x07 ^ x08, 12);\n    x02 = x02 + x07 | 0;\n    x13 = rotl(x13 ^ x02, 8);\n    x08 = x08 + x13 | 0;\n    x07 = rotl(x07 ^ x08, 7);\n    x03 = x03 + x04 | 0;\n    x14 = rotl(x14 ^ x03, 16);\n    x09 = x09 + x14 | 0;\n    x04 = rotl(x04 ^ x09, 12);\n    x03 = x03 + x04 | 0;\n    x14 = rotl(x14 ^ x03, 8);\n    x09 = x09 + x14 | 0;\n    x04 = rotl(x04 ^ x09, 7);\n  }\n  // Write output\n  let oi = 0;\n  out[oi++] = y00 + x00 | 0;\n  out[oi++] = y01 + x01 | 0;\n  out[oi++] = y02 + x02 | 0;\n  out[oi++] = y03 + x03 | 0;\n  out[oi++] = y04 + x04 | 0;\n  out[oi++] = y05 + x05 | 0;\n  out[oi++] = y06 + x06 | 0;\n  out[oi++] = y07 + x07 | 0;\n  out[oi++] = y08 + x08 | 0;\n  out[oi++] = y09 + x09 | 0;\n  out[oi++] = y10 + x10 | 0;\n  out[oi++] = y11 + x11 | 0;\n  out[oi++] = y12 + x12 | 0;\n  out[oi++] = y13 + x13 | 0;\n  out[oi++] = y14 + x14 | 0;\n  out[oi++] = y15 + x15 | 0;\n}\n/**\n * hchacha helper method, used primarily in xchacha, to hash\n * key and nonce into key' and nonce'.\n * Same as chachaCore, but there doesn't seem to be a way to move the block\n * out without 25% performance hit.\n */\n// prettier-ignore\nexport function hchacha(c, key, src, out) {\n  const k32 = u32(key);\n  const i32 = u32(src);\n  const o32 = u32(out);\n  let x00 = c[0],\n    x01 = c[1],\n    x02 = c[2],\n    x03 = c[3];\n  let x04 = k32[0],\n    x05 = k32[1],\n    x06 = k32[2],\n    x07 = k32[3];\n  let x08 = k32[4],\n    x09 = k32[5],\n    x10 = k32[6],\n    x11 = k32[7];\n  let x12 = i32[0],\n    x13 = i32[1],\n    x14 = i32[2],\n    x15 = i32[3];\n  for (let i = 0; i < 20; i += 2) {\n    x00 = x00 + x04 | 0;\n    x12 = rotl(x12 ^ x00, 16);\n    x08 = x08 + x12 | 0;\n    x04 = rotl(x04 ^ x08, 12);\n    x00 = x00 + x04 | 0;\n    x12 = rotl(x12 ^ x00, 8);\n    x08 = x08 + x12 | 0;\n    x04 = rotl(x04 ^ x08, 7);\n    x01 = x01 + x05 | 0;\n    x13 = rotl(x13 ^ x01, 16);\n    x09 = x09 + x13 | 0;\n    x05 = rotl(x05 ^ x09, 12);\n    x01 = x01 + x05 | 0;\n    x13 = rotl(x13 ^ x01, 8);\n    x09 = x09 + x13 | 0;\n    x05 = rotl(x05 ^ x09, 7);\n    x02 = x02 + x06 | 0;\n    x14 = rotl(x14 ^ x02, 16);\n    x10 = x10 + x14 | 0;\n    x06 = rotl(x06 ^ x10, 12);\n    x02 = x02 + x06 | 0;\n    x14 = rotl(x14 ^ x02, 8);\n    x10 = x10 + x14 | 0;\n    x06 = rotl(x06 ^ x10, 7);\n    x03 = x03 + x07 | 0;\n    x15 = rotl(x15 ^ x03, 16);\n    x11 = x11 + x15 | 0;\n    x07 = rotl(x07 ^ x11, 12);\n    x03 = x03 + x07 | 0;\n    x15 = rotl(x15 ^ x03, 8);\n    x11 = x11 + x15 | 0;\n    x07 = rotl(x07 ^ x11, 7);\n    x00 = x00 + x05 | 0;\n    x15 = rotl(x15 ^ x00, 16);\n    x10 = x10 + x15 | 0;\n    x05 = rotl(x05 ^ x10, 12);\n    x00 = x00 + x05 | 0;\n    x15 = rotl(x15 ^ x00, 8);\n    x10 = x10 + x15 | 0;\n    x05 = rotl(x05 ^ x10, 7);\n    x01 = x01 + x06 | 0;\n    x12 = rotl(x12 ^ x01, 16);\n    x11 = x11 + x12 | 0;\n    x06 = rotl(x06 ^ x11, 12);\n    x01 = x01 + x06 | 0;\n    x12 = rotl(x12 ^ x01, 8);\n    x11 = x11 + x12 | 0;\n    x06 = rotl(x06 ^ x11, 7);\n    x02 = x02 + x07 | 0;\n    x13 = rotl(x13 ^ x02, 16);\n    x08 = x08 + x13 | 0;\n    x07 = rotl(x07 ^ x08, 12);\n    x02 = x02 + x07 | 0;\n    x13 = rotl(x13 ^ x02, 8);\n    x08 = x08 + x13 | 0;\n    x07 = rotl(x07 ^ x08, 7);\n    x03 = x03 + x04 | 0;\n    x14 = rotl(x14 ^ x03, 16);\n    x09 = x09 + x14 | 0;\n    x04 = rotl(x04 ^ x09, 12);\n    x03 = x03 + x04 | 0;\n    x14 = rotl(x14 ^ x03, 8);\n    x09 = x09 + x14 | 0;\n    x04 = rotl(x04 ^ x09, 7);\n  }\n  o32[0] = x00;\n  o32[1] = x01;\n  o32[2] = x02;\n  o32[3] = x03;\n  o32[4] = x12;\n  o32[5] = x13;\n  o32[6] = x14;\n  o32[7] = x15;\n  return out;\n}\n/**\n * Original, non-RFC chacha20 from DJB. 8-byte nonce, 8-byte counter.\n */\nexport const chacha20orig = /* @__PURE__ */salsaBasic({\n  core: chachaCore,\n  counterRight: false,\n  counterLen: 8\n});\n/**\n * ChaCha stream cipher. Conforms to RFC 8439 (IETF, TLS). 12-byte nonce, 4-byte counter.\n * With 12-byte nonce, it's not safe to use fill it with random (CSPRNG), due to collision chance.\n */\nexport const chacha20 = /* @__PURE__ */salsaBasic({\n  core: chachaCore,\n  counterRight: false,\n  counterLen: 4,\n  allow128bitKeys: false\n});\n/**\n * XChaCha eXtended-nonce ChaCha. 24-byte nonce.\n * With 24-byte nonce, it's safe to use fill it with random (CSPRNG).\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha\n */\nexport const xchacha20 = /* @__PURE__ */salsaBasic({\n  core: chachaCore,\n  counterRight: false,\n  counterLen: 8,\n  extendNonceFn: hchacha,\n  allow128bitKeys: false\n});\n/**\n * Reduced 8-round chacha, described in original paper.\n */\nexport const chacha8 = /* @__PURE__ */salsaBasic({\n  core: chachaCore,\n  counterRight: false,\n  counterLen: 4,\n  rounds: 8\n});\n/**\n * Reduced 12-round chacha, described in original paper.\n */\nexport const chacha12 = /* @__PURE__ */salsaBasic({\n  core: chachaCore,\n  counterRight: false,\n  counterLen: 4,\n  rounds: 12\n});\nconst ZERO = /* @__PURE__ */new Uint8Array(16);\n// Pad to digest size with zeros\nconst updatePadded = (h, msg) => {\n  h.update(msg);\n  const left = msg.length % 16;\n  if (left) h.update(ZERO.subarray(left));\n};\nconst computeTag = (fn, key, nonce, data, AAD) => {\n  const authKey = fn(key, nonce, new Uint8Array(32));\n  const h = poly1305.create(authKey);\n  if (AAD) updatePadded(h, AAD);\n  updatePadded(h, data);\n  const num = new Uint8Array(16);\n  const view = createView(num);\n  setBigUint64(view, 0, BigInt(AAD ? AAD.length : 0), true);\n  setBigUint64(view, 8, BigInt(data.length), true);\n  h.update(num);\n  const res = h.digest();\n  authKey.fill(0);\n  return res;\n};\n/**\n * AEAD algorithm from RFC 8439.\n * Salsa20 and chacha (RFC 8439) use poly1305 differently.\n * We could have composed them similar to:\n * https://github.com/paulmillr/scure-base/blob/b266c73dde977b1dd7ef40ef7a23cc15aab526b3/index.ts#L250\n * But it's hard because of authKey:\n * In salsa20, authKey changes position in salsa stream.\n * In chacha, authKey can't be computed inside computeTag, it modifies the counter.\n */\nexport const _poly1305_aead = xorStream => (key, nonce, AAD) => {\n  const tagLength = 16;\n  ensureBytes(key, 32);\n  ensureBytes(nonce);\n  return {\n    tagLength,\n    encrypt: (plaintext, output) => {\n      const plength = plaintext.length;\n      const clength = plength + tagLength;\n      if (output) {\n        ensureBytes(output, clength);\n      } else {\n        output = new Uint8Array(clength);\n      }\n      xorStream(key, nonce, plaintext, output, 1);\n      const tag = computeTag(xorStream, key, nonce, output.subarray(0, -tagLength), AAD);\n      output.set(tag, plength); // append tag\n      return output;\n    },\n    decrypt: (ciphertext, output) => {\n      const clength = ciphertext.length;\n      const plength = clength - tagLength;\n      if (clength < tagLength) throw new Error(`encrypted data must be at least ${tagLength} bytes`);\n      if (output) {\n        ensureBytes(output, plength);\n      } else {\n        output = new Uint8Array(plength);\n      }\n      const data = ciphertext.subarray(0, -tagLength);\n      const passedTag = ciphertext.subarray(-tagLength);\n      const tag = computeTag(xorStream, key, nonce, data, AAD);\n      if (!equalBytes(passedTag, tag)) throw new Error('invalid tag');\n      xorStream(key, nonce, data, output, 1);\n      return output;\n    }\n  };\n};\n/**\n * ChaCha20-Poly1305 from RFC 8439.\n * With 12-byte nonce, it's not safe to use fill it with random (CSPRNG), due to collision chance.\n */\nexport const chacha20poly1305 = /* @__PURE__ */_poly1305_aead(chacha20);\n/**\n * XChaCha20-Poly1305 extended-nonce chacha.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha\n * With 24-byte nonce, it's safe to use fill it with random (CSPRNG).\n */\nexport const xchacha20poly1305 = /* @__PURE__ */_poly1305_aead(xchacha20);","map":{"version":3,"names":["createView","ensureBytes","equalBytes","setBigUint64","u32","poly1305","salsaBasic","rotl","a","b","chachaCore","c","k","n","out","cnt","rounds","y00","y01","y02","y03","y04","y05","y06","y07","y08","y09","y10","y11","y12","y13","y14","y15","x00","x01","x02","x03","x04","x05","x06","x07","x08","x09","x10","x11","x12","x13","x14","x15","i","oi","hchacha","key","src","k32","i32","o32","chacha20orig","core","counterRight","counterLen","chacha20","allow128bitKeys","xchacha20","extendNonceFn","chacha8","chacha12","ZERO","Uint8Array","updatePadded","h","msg","update","left","length","subarray","computeTag","fn","nonce","data","AAD","authKey","create","num","view","BigInt","res","digest","fill","_poly1305_aead","xorStream","tagLength","encrypt","plaintext","output","plength","clength","tag","set","decrypt","ciphertext","Error","passedTag","chacha20poly1305","xchacha20poly1305"],"sources":["/Users/lance/myProject/nostr-client-web/node_modules/@noble/ciphers/src/chacha.ts"],"sourcesContent":["import { Cipher, createView, ensureBytes, equalBytes, setBigUint64, u32 } from './utils.js';\nimport { poly1305 } from './_poly1305.js';\nimport { salsaBasic } from './_salsa.js';\n\n// ChaCha20 stream cipher was released in 2008. ChaCha aims to increase\n// the diffusion per round, but had slightly less cryptanalysis.\n// https://cr.yp.to/chacha.html, http://cr.yp.to/chacha/chacha-20080128.pdf\n\n// Left rotate for uint32\nconst rotl = (a: number, b: number) => (a << b) | (a >>> (32 - b));\n\n/**\n * ChaCha core function.\n */\n// prettier-ignore\nfunction chachaCore(\n  c: Uint32Array, k: Uint32Array, n: Uint32Array, out: Uint32Array, cnt: number, rounds = 20\n): void {\n  let y00 = c[0], y01 = c[1], y02 = c[2], y03 = c[3]; // \"expa\"   \"nd 3\"  \"2-by\"  \"te k\"\n  let y04 = k[0], y05 = k[1], y06 = k[2], y07 = k[3]; // Key      Key     Key     Key\n  let y08 = k[4], y09 = k[5], y10 = k[6], y11 = k[7]; // Key      Key     Key     Key\n  let y12 = cnt,  y13 = n[0], y14 = n[1], y15 = n[2]; // Counter  Counter\tNonce   Nonce\n  // Save state to temporary variables\n  let x00 = y00, x01 = y01, x02 = y02, x03 = y03,\n      x04 = y04, x05 = y05, x06 = y06, x07 = y07,\n      x08 = y08, x09 = y09, x10 = y10, x11 = y11,\n      x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n  // Main loop\n  for (let i = 0; i < rounds; i += 2) {\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 16);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 12);\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 8);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 7);\n\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 16);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 12);\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 8);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 7);\n\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 16);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 12);\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^x02, 8);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 7);\n\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 16);\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 12);\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 8)\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 7);\n\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 16);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 12);\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 8);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 7);\n\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 16);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 12);\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 8);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 7);\n\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 16);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 12);\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 8);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 7);\n\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 16)\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 12);\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 8);\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 7);\n  }\n  // Write output\n  let oi = 0;\n  out[oi++] = (y00 + x00) | 0; out[oi++] = (y01 + x01) | 0;\n  out[oi++] = (y02 + x02) | 0; out[oi++] = (y03 + x03) | 0;\n  out[oi++] = (y04 + x04) | 0; out[oi++] = (y05 + x05) | 0;\n  out[oi++] = (y06 + x06) | 0; out[oi++] = (y07 + x07) | 0;\n  out[oi++] = (y08 + x08) | 0; out[oi++] = (y09 + x09) | 0;\n  out[oi++] = (y10 + x10) | 0; out[oi++] = (y11 + x11) | 0;\n  out[oi++] = (y12 + x12) | 0; out[oi++] = (y13 + x13) | 0;\n  out[oi++] = (y14 + x14) | 0; out[oi++] = (y15 + x15) | 0;\n}\n/**\n * hchacha helper method, used primarily in xchacha, to hash\n * key and nonce into key' and nonce'.\n * Same as chachaCore, but there doesn't seem to be a way to move the block\n * out without 25% performance hit.\n */\n// prettier-ignore\nexport function hchacha(\n  c: Uint32Array, key: Uint8Array, src: Uint8Array, out: Uint8Array\n): Uint8Array {\n  const k32 = u32(key);\n  const i32 = u32(src);\n  const o32 = u32(out);\n  let x00 = c[0],   x01 = c[1],   x02 = c[2],   x03 = c[3];\n  let x04 = k32[0], x05 = k32[1], x06 = k32[2], x07 = k32[3];\n  let x08 = k32[4], x09 = k32[5], x10 = k32[6], x11 = k32[7]\n  let x12 = i32[0], x13 = i32[1], x14 = i32[2], x15 = i32[3];\n   for (let i = 0; i < 20; i += 2) {\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 16);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 12);\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 8);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 7);\n\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 16);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 12);\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 8);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 7);\n\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 16);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 12);\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 8);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 7);\n\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 16);\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 12);\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 8)\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 7);\n\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 16);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 12);\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 8);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 7);\n\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 16);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 12);\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 8);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 7);\n\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 16);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 12);\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 8);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 7);\n\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 16)\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 12);\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 8);\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 7);\n  }\n  o32[0] = x00;\n  o32[1] = x01;\n  o32[2] = x02;\n  o32[3] = x03;\n  o32[4] = x12;\n  o32[5] = x13;\n  o32[6] = x14;\n  o32[7] = x15;\n  return out;\n}\n/**\n * Original, non-RFC chacha20 from DJB. 8-byte nonce, 8-byte counter.\n */\nexport const chacha20orig = /* @__PURE__ */ salsaBasic({\n  core: chachaCore,\n  counterRight: false,\n  counterLen: 8,\n});\n/**\n * ChaCha stream cipher. Conforms to RFC 8439 (IETF, TLS). 12-byte nonce, 4-byte counter.\n * With 12-byte nonce, it's not safe to use fill it with random (CSPRNG), due to collision chance.\n */\nexport const chacha20 = /* @__PURE__ */ salsaBasic({\n  core: chachaCore,\n  counterRight: false,\n  counterLen: 4,\n  allow128bitKeys: false,\n});\n\n/**\n * XChaCha eXtended-nonce ChaCha. 24-byte nonce.\n * With 24-byte nonce, it's safe to use fill it with random (CSPRNG).\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha\n */\nexport const xchacha20 = /* @__PURE__ */ salsaBasic({\n  core: chachaCore,\n  counterRight: false,\n  counterLen: 8,\n  extendNonceFn: hchacha,\n  allow128bitKeys: false,\n});\n\n/**\n * Reduced 8-round chacha, described in original paper.\n */\nexport const chacha8 = /* @__PURE__ */ salsaBasic({\n  core: chachaCore,\n  counterRight: false,\n  counterLen: 4,\n  rounds: 8,\n});\n\n/**\n * Reduced 12-round chacha, described in original paper.\n */\nexport const chacha12 = /* @__PURE__ */ salsaBasic({\n  core: chachaCore,\n  counterRight: false,\n  counterLen: 4,\n  rounds: 12,\n});\n\nconst ZERO = /* @__PURE__ */ new Uint8Array(16);\n// Pad to digest size with zeros\nconst updatePadded = (h: ReturnType<typeof poly1305.create>, msg: Uint8Array) => {\n  h.update(msg);\n  const left = msg.length % 16;\n  if (left) h.update(ZERO.subarray(left));\n};\n\nconst computeTag = (\n  fn: typeof chacha20,\n  key: Uint8Array,\n  nonce: Uint8Array,\n  data: Uint8Array,\n  AAD?: Uint8Array\n) => {\n  const authKey = fn(key, nonce, new Uint8Array(32));\n  const h = poly1305.create(authKey);\n  if (AAD) updatePadded(h, AAD);\n  updatePadded(h, data);\n  const num = new Uint8Array(16);\n  const view = createView(num);\n  setBigUint64(view, 0, BigInt(AAD ? AAD.length : 0), true);\n  setBigUint64(view, 8, BigInt(data.length), true);\n  h.update(num);\n  const res = h.digest();\n  authKey.fill(0);\n  return res;\n};\n\n/**\n * AEAD algorithm from RFC 8439.\n * Salsa20 and chacha (RFC 8439) use poly1305 differently.\n * We could have composed them similar to:\n * https://github.com/paulmillr/scure-base/blob/b266c73dde977b1dd7ef40ef7a23cc15aab526b3/index.ts#L250\n * But it's hard because of authKey:\n * In salsa20, authKey changes position in salsa stream.\n * In chacha, authKey can't be computed inside computeTag, it modifies the counter.\n */\nexport const _poly1305_aead =\n  (xorStream: typeof chacha20) =>\n  (key: Uint8Array, nonce: Uint8Array, AAD?: Uint8Array): Cipher => {\n    const tagLength = 16;\n    ensureBytes(key, 32);\n    ensureBytes(nonce);\n    return {\n      tagLength,\n      encrypt: (plaintext: Uint8Array, output?: Uint8Array) => {\n        const plength = plaintext.length;\n        const clength = plength + tagLength;\n        if (output) {\n          ensureBytes(output, clength);\n        } else {\n          output = new Uint8Array(clength);\n        }\n        xorStream(key, nonce, plaintext, output, 1);\n        const tag = computeTag(xorStream, key, nonce, output.subarray(0, -tagLength), AAD);\n        output.set(tag, plength); // append tag\n        return output;\n      },\n      decrypt: (ciphertext: Uint8Array, output?: Uint8Array) => {\n        const clength = ciphertext.length;\n        const plength = clength - tagLength;\n        if (clength < tagLength)\n          throw new Error(`encrypted data must be at least ${tagLength} bytes`);\n        if (output) {\n          ensureBytes(output, plength);\n        } else {\n          output = new Uint8Array(plength);\n        }\n        const data = ciphertext.subarray(0, -tagLength);\n        const passedTag = ciphertext.subarray(-tagLength);\n        const tag = computeTag(xorStream, key, nonce, data, AAD);\n        if (!equalBytes(passedTag, tag)) throw new Error('invalid tag');\n        xorStream(key, nonce, data, output, 1);\n        return output;\n      },\n    };\n  };\n\n/**\n * ChaCha20-Poly1305 from RFC 8439.\n * With 12-byte nonce, it's not safe to use fill it with random (CSPRNG), due to collision chance.\n */\nexport const chacha20poly1305 = /* @__PURE__ */ _poly1305_aead(chacha20);\n/**\n * XChaCha20-Poly1305 extended-nonce chacha.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha\n * With 24-byte nonce, it's safe to use fill it with random (CSPRNG).\n */\nexport const xchacha20poly1305 = /* @__PURE__ */ _poly1305_aead(xchacha20);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}